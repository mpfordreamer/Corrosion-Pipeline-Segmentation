@model UjiCoba.Models.UploadImage

@{
    Layout = "_Layout";
}

<head>
</head>

<body style="margin-top: 10px; margin-bottom: 30px;">

<!-- Banner Section -->
<div class="header-carousel position-relative" style="height: calc(120vh); overflow: hidden;"> 
    <div class="owl-carousel header-carousel position-relative">
        <div class="owl-carousel-item position-relative">
            <img class="img-fluid" src="~/images/Banner.png" alt="" style="height: 100%; width: 100%; object-fit: cover;"> <!-- Ensure the image covers the area -->
            <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center">
                <div class="container">
                    <div class="row justify-content-start">
                        <div class="col-10 col-lg-8">
                        </div>
                    </div>
                </div>
            </div>
            <div class="position-absolute bottom-0 start-0 w-100 p-3 d-flex justify-content-start" style="transform: translateY(-138%) translateX(-5%);"> <!-- Use Flexbox to align left -->
                <div class="container">
                    <div class="row">
                        <div class="col-12"> <!-- Removed text-center to align left -->
                            <button type="button" class="btn btn-primary py-3" id="tryItOutButton" style="font-size: 1.5rem; width: 30%; min-width: 150px;"><b>Try it Out</b></button> 
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row justify-content-center mt-4" id="uploadForm" style="margin-bottom:100px;"> <!-- Added margin-top for spacing -->
    <div class="col-md-8">
        <div class="card shadow-lg p-4 rounded-4">
            <h2 class="text-center text-primary my-5">Upload Image for Segmentation</h2>
            <h3 class="text-center mb-4 text-muted">Select Image</h3>
            <form asp-action="UploadImages" method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="ImageFiles" class="form-label">Segmentation Image</label>
                    <input type="file" class="form-control" id="ImageFiles" name="ImageFiles" accept="image/*" multiple />
                    <span asp-validation-for="ImageFiles" class="text-danger"></span>
                </div>

                <!-- Dropdown for segmentation options -->
                <div class="form-group mt-3">
                    <label for="segmentationType" class="form-label">Select Segmentation Type</label>
                    <select id="segmentationType" name="segmentationType" class="form-select">
                        <option value="asset">Asset</option>
                        <option value="corrosion">Corrosion</option>
                        <option value="intersection">Intersection</option>
                        <option value="data">Visual Report</option>
                        <option value="all">All Option</option>
                    </select>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary btn-lg w-100">Upload</button>
                </div>
            </form>
            
            <!-- Preview Container for displaying images -->
            <div id="previewContainer" class="row mt-4"></div>
        </div>
    </div>
</div>

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
    .main-banner {
        background-image: url('~/images/Upload2.jpg');
        background-size: cover;
        background-position: center;
        width: 100%;
        padding: 100px 0; /* Adjust padding as needed */
        position: relative;
        margin: 0; /* Remove margin to ensure it touches the sides */
    }

    .intro-banner .container-fluid {
        position : relative;
        z-index: 2; /* Ensure content is above the overlay */
    }

    .intro-banner h6, .intro-banner h2 {
        color: white; /* Change text color for better visibility */
    }

    .intro-banner a {
        color: #fa65b1 !important; /* Link color */
        border: 1px solid #fa65b1 !important; /* Link border color */
    }

    .intro-banner a:hover {
        background-color: #fa65b1; /* Hover background color */
        color: #fff !important; /* Hover text color */
    }
    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.3); /* Optional: Black overlay with 30% opacity */
        z-index: 1; /* Ensure overlay is above the background */
    }

    .left-content {
        position: relative;
        z-index: 2; /* Ensure content is above the overlay */
    }

    .right-image {
        position: relative;
        z-index: 2; /* Ensure content is above the overlay */
    }
</style>

<script>

document.getElementById('tryItOutButton').addEventListener('click', function() {
        document.getElementById('uploadForm').scrollIntoView({ behavior: 'smooth' });
    });
    
document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('ImageFiles').addEventListener('change', function (event) {
        const files = Array.from(event.target.files);
        const previewContainer = document.getElementById('previewContainer');
        previewContainer.innerHTML = ''; // Clear previous previews

        files.forEach((file) => {
            if (!file.type.startsWith('image/')) return;

            const reader = new FileReader();
            reader.onload = function (e) {
                const colDiv = document.createElement('div');
                colDiv.className = 'col-md-4 preview-container';

                const img = document.createElement('img');
                img.src = e.target.result;
                img.className = 'preview-image';

                const fileInfo = document.createElement('div');
                fileInfo.className = 'file-info';
                fileInfo.innerHTML = `
                    <p class="file-name">${file.name}</p>
                    <p class="file-size"><strong>Size:</strong> ${(file.size / 1024).toFixed(2)} KB</p>
                    <p class="file-type"><strong>Type:</strong> ${file.type}</p>
                `;

                const removeButton = document.createElement('button');
                removeButton.className = 'remove-button';
                removeButton.textContent = '×';
                removeButton.onclick = function () {
                    colDiv.remove();
                };

                colDiv.appendChild(img);
                colDiv.appendChild(fileInfo);
                colDiv.appendChild(removeButton);
                previewContainer.appendChild(colDiv);
            };

            reader.readAsDataURL(file);
        });
    });

    document.getElementById('uploadButton').addEventListener('click', function () {
        const formData = new FormData(document.getElementById('uploadForm'));
        const segmentationType = document.getElementById('segmentationType').value;

        // Append the selected segmentation type to the form data
        formData.append('segmentationType', segmentationType);

        fetch('http://localhost:5001/upload/', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok: ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            if (data.message) {
                alert(data.message);
                // Call the appropriate segmentation endpoint based on the selected type
                fetch(`http://localhost:5001/segment/${segmentationType}/`)
                .then(segResponse => {
                    if (!segResponse.ok) {
                        throw new Error('Network response was not ok: ' + segResponse.statusText);
                    }
                    return segResponse.blob();
                })
                .then(imageBlob => {
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(imageBlob);
                    img.className = 'img-fluid rounded mt-4';
                    document.getElementById('previewContainer').appendChild(img);
                })
                .catch(error => {
                    console.error('Error fetching segmented image:', error);
                    alert('Error fetching segmented image. Please try again.');
                });
            } else {
                alert('No message returned from the server.');
            }
        })
        .catch(error => {
            console.error('Error uploading images:', error);
            alert('Error uploading images. Please try again.');
        });
    });
});
</script>
</body>